@mixin setBootstrapGutters($gutter){
	$i: 1;
	$list: ".container, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";

	@for $i from (1 + 1) through $grid-columns {
		$list: "#{$list}, .col-xs-#{$i}, .col-sm-#{$i}, .col-md-#{$i}, .col-lg-#{$i}";
	}

	#{$list} {
		padding-left:  ($gutter / 2);
		padding-right: ($gutter / 2);
	}

	.row {
		margin-left: -($gutter / 2);
		margin-right: -($gutter / 2);
	}
}

@mixin vendor($property, $value){
	$vendors:(o, webkit, moz, ms);
	
	@for $i from 1 through length($vendors) {
		-#{nth($vendors, $i)}-#{$property}: $value;
	}

	#{$property}: $value;
}

@mixin transition($what, $howLong, $ease:ease, $delay:0s) {
	@include vendor(transition, #{$what} #{$howLong} #{$ease} #{$delay});
}

@mixin multiple-transitions($transitions){
	$transitionString: '';

	@for $i from 1 through length($transitions) {
		$thisTransition: nth($transitions, $i);
		
		@each $what, $howLong, $ease, $delay in $thisTransition {
			$transitionString: #{$transitionString} #{$what} #{$howLong} #{$ease} #{$delay};
		}
		
		@if $i < length($transitions){
			$transitionString: $transitionString+',';
		}
	}

	@include vendor(transition, $transitionString);
}


.half {
	width: 50%;
}

@mixin circle($w, $color) {
	width: $w;
	height: $w;
	border-radius: 100%;
	background-color: $color;
}

@mixin min-dppx($dppx) {
	@media screen and 
			(-webkit-min-device-pixel-ratio: $dppx),
	    	(min--moz-device-pixel-ratio: $dppx),
			(min-resolution: #{$dppx}dppx),
			(min-resolution: ($dppx * 96dpi)) {

		@content;
	}
}

@mixin combined-retina-query($dppx, $width) {
	@media screen and 
			(min-width: $width),
			(-webkit-min-device-pixel-ratio: $dppx),
	    	(min--moz-device-pixel-ratio: $dppx),
			(min-resolution: #{$dppx}dppx),
			(min-resolution: ($dppx * 96dpi)) {

		@content;
	}
}

@mixin retina-bg($image, $image-format, $settings) {
	@for $i from 1 through length($settings) {
		$thisSetting: nth($settings, $i);

		$dppx: map-get($thisSetting, dppx);
		$min-width: map-get($thisSetting, min-width);
		$width: map-get($thisSetting, width);
		$height: map-get($thisSetting, height);

		background-size: cover;
		background: url('../img/#{$image}@#{$dppx}x.#{$image-format}');
		
		@if $dppx != null && $min-width != null {
			@include combined-retina-query($dppx, $min-width) {
				width: $width;
				height: $height;
			}
		}
		@else if $dppx != null {
			@include min-dppx($dppx) {
				width: $width;
				height: $height;
			}
		}
		@else if $min-width != null {
			@include at-least($min-width) {
				width: $width;
				height: $height;
			}
		}
	}
}

@mixin at-least($width){
	@media all and (min-width: $width){
		@content;
	}
}

@mixin at-most($width){
	@media all and (max-width: $width){
		@content;
	}
}

@mixin between($min-width, $max-width){
	@media all and (min-width: $min-width) and (max-width: $max-width - 1){
		@content;
	}
}

@mixin isNot($width){
	@media all and (min-width: $width + 1), all and (max-width: $width - 1){
		@content;
	}
}